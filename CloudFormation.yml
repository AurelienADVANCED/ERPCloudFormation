AWSTemplateFormatVersion: "2010-09-09"
Description: Infrastructure pour la Zone ERP - ProjetDeFous0 

Parameters:
  InstanceType:
    Type: String
    Default: t2.medium
    Description: Type d'instance EC2

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: AurelienClef
    Description: Nom de la paire de clés pour accéder à l'instance EC2

  DBHost:
    Type: String
    Default: "localhost"
    Description: Hôte de la base de données MySQL (ici on reste sur localhost)

  DBUser:
    Type: String
    Default: "myappuser"
    Description: Utilisateur MySQL

  DBPassword:
    Type: String
    Default: "rK7r6d63Mbj7EH"
    NoEcho: true
    Description: Mot de passe MySQL

    
Resources:
  ### VPC et Réseau ###
  ProjetDeFousVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ProjetDeFousVPC

  ProjetDeFousPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjetDeFousVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true

  ProjetDeFousPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjetDeFousVPC
      CidrBlock: 10.0.2.0/24

  ProjetDeFousInternetGateway:
    Type: AWS::EC2::InternetGateway

  ProjetDeFousAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ProjetDeFousVPC
      InternetGatewayId: !Ref ProjetDeFousInternetGateway

  ProjetDeFousRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProjetDeFousVPC

  ProjetDeFousRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ProjetDeFousRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ProjetDeFousInternetGateway

  # Association de la table de routage au sous-réseau public
  ProjetDeFousPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ProjetDeFousPublicSubnet
      RouteTableId: !Ref ProjetDeFousRouteTable

  ###### SecurityGroup ######
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ERP front/back SSH access"
      VpcId: !Ref ProjetDeFousVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  ### Instance EC2 Principale ###
  ProjetDeFousERPFrontBackInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: ami-037852bba16907d50
      SubnetId: !Ref ProjetDeFousPublicSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: ProjetDeFousERP-FrontBack
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update -y && sudo apt upgrade -y

          # Installation de MySQL
          sudo apt-get install -y mysql-server
          sudo systemctl start mysql
          sudo systemctl enable mysql
          
          # Installation de Git
          sudo apt-get install -y git-all

          # Création base de données, utilisateur et mot de passe
          sudo mysql -u root -e "CREATE DATABASE IF NOT EXISTS erpdb;"
          sudo mysql -u root -e "CREATE USER IF NOT EXISTS '${DBUser}'@'localhost' IDENTIFIED BY '${DBPassword}';"
          sudo mysql -u root -e "GRANT ALL PRIVILEGES ON erpdb.* TO '${DBUser}'@'localhost'; FLUSH PRIVILEGES;"

          # Installation Java 17 + Maven
          sudo apt-get install -y openjdk-17-jdk maven

          # Export des variables d'environnement pour que Spring Boot les lise
          export DB_HOST=${DBHost}
          export DB_USER=${DBUser}
          export DB_PASSWORD=${DBPassword}

          # Cloner le repo Spring Boot, builder et lancer l'app
          git clone https://github.com/AurelienADVANCED/ERPBack.git /home/ubuntu/ERPBack
          cd /home/ubuntu/ERPBack
          mvn clean install
          java -jar target/erp-0.0.1.war &

           # === INSTALLATION NODE POUR LE FRONT VITE ===
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          sudo apt-get install -y npm
      
          # Cloner le projet Vite
          git clone https://github.com/AurelienADVANCED/FrontERP.git /home/ubuntu/ERPFront
          cd /home/ubuntu/ERPFront

          # Ajouter un fichier .env avec l'IP publique de l'instance EC2
          PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          echo "VITE_API_URL=http://${PUBLIC_IP}:8080" > .env
          
          npm install       # ou yarn install, selon ton lockfile
          npm run build     # Compile ton front en production => dist/
      
          # Servir le build sur le port 3000 à l'aide de "serve" 
          sudo npm install -g serve
          serve -s dist -l 3000 > /home/ubuntu/vite.log 2>&1 &
      
          # === FIREWALL UFW (optionnel) ===
          sudo ufw allow 22       # SSH
          sudo ufw allow 3306     # MySQL
          sudo ufw allow 8080     # Back Spring Boot (si c'est le port par défaut)
          sudo ufw allow 3000     # Front (serve statique)
          sudo ufw --force enable

  # ProjetDeFousERPDBInstance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     InstanceType: !Ref InstanceType
  #     KeyName: !Ref KeyName
  #     ImageId: ami-09042b2f6d07d164a 
  #     SubnetId: !Ref ProjetDeFousPrivateSubnet
  #     Tags:
  #       - Key: Name
  #         Value: ProjetDeFousERP-DB

  # ProjetDeFousERPDBTestInstance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     InstanceType: !Ref InstanceType
  #     KeyName: !Ref KeyName
  #     ImageId: ami-09042b2f6d07d164a
  #     SubnetId: !Ref ProjetDeFousPrivateSubnet
  #     Tags:
  #       - Key: Name
  #         Value: ProjetDeFousERP-DB-Test

  # ProjetDeFousERPTestInstance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     InstanceType: !Ref InstanceType
  #     KeyName: !Ref KeyName
  #     ImageId: ami-09042b2f6d07d164a
  #     SubnetId: !Ref ProjetDeFousPublicSubnet
  #     SecurityGroupIds:
  #       - !Ref SecurityGroup
  #     Tags:
  #       - Key: Name
  #         Value: ProjetDeFousERP-Test

Outputs:
  # On commente aussi les autres instances pour éviter les erreurs de référence.
  ProjetDeFousERPInstances:
    Description: Liste des instances EC2 pour la Zone ERP (uniquement FrontBack ici)
    Value: |
      ERP-FrontBack: !Ref ProjetDeFousERPFrontBackInstance
      # ERP-DB: !Ref ProjetDeFousERPDBInstance
      # ERP-DB-Test: !Ref ProjetDeFousERPDBTestInstance
      # ERP-Test: !Ref ProjetDeFousERPTestInstance
